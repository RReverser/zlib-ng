name: CI CMake
on: [push, pull_request]
jobs:
  ci-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu Clang MSAN
            os: self-hosted
            compiler: clang-11
            cxx-compiler: clang++-11
            cmake-args: -GNinja -DWITH_SANITIZER=Memory
            packages:  ninja-build llvm-11-tools
            gcov-exec: llvm-cov-11 gcov
            cxx-flags: -L/usr/src/libcxx_msan/lib -I/usr/src/libcxx_msan/include -I/usr/src/libcxx_msan/include/c++/v1
            cflags: -g3 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-memory-track-origins
            codecov: ubuntu_clang_msan

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Checkout test corpora
      uses: actions/checkout@v2
      # Don't test against all corpora with MinGW due to Wine being unable to run parallel jobs
      # without connection timeout. Without parallel jobs test runs using Wine take close to an hour.
      if: contains(matrix.name, 'MinGW') == false
      with:
        repository: zlib-ng/corpora
        path: test/data/corpora

    - name: Install packages (Ubuntu)
      if: runner.os == 'Linux' && matrix.packages
      run: |
        sudo dpkg --add-architecture i386 # Required for wine32
        sudo apt-add-repository ppa:ondrej/php -y
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.packages }}

    - name: Install packages (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ninja ${{ matrix.packages }} --no-progress

    - name: Install packages (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja ${{ matrix.packages }}
      env:
        HOMEBREW_NO_INSTALL_CLEANUP: 1

    - name: Install codecov.io tools
      if: matrix.codecov
      run: |
        python -u -m pip install --user codecov

    - name: Initialize Wine
      # Prevent parallel test jobs from initializing Wine at the same time
      if: contains(matrix.packages, 'wine')
      run: |
        wineboot --init

    - name: Compile C++ libraries with MSAN
      if: contains(matrix.name, 'MSAN')
      run: |
        git clone --depth=1 https://github.com/llvm/llvm-project llvm-project
        cd llvm-project
        mkdir build
        cd build
        cmake -GNinja .. -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_USE_SANITIZER=MemoryWithOrigins
        cmake --build . --verbose -- cxx cxxabi

    - name: Generate project files
      # Shared libraries turned off for qemu ppc* and sparc & reduce code coverage sources
      run: |
        mkdir ${{ matrix.build-dir || '.not-used' }}
        cd ${{ matrix.build-dir || '.' }}
        cmake ${{ matrix.build-src-dir || '.' }} ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }} -DBUILD_SHARED_LIBS=OFF -DWITH_FUZZERS=ON -DWITH_CODE_COVERAGE=ON -DWITH_MAINTAINER_WARNINGS=ON
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.cxx-compiler }}
        CXXFLAGS: ${{ matrix.cxx-flags }}
        CFLAGS: ${{ matrix.cflags }}
        LDFLAGS: ${{ matrix.ldflags }}
        CI: true

    - name: Compile source code
      run: |
        cd ${{ matrix.build-dir || '.' }}
        cmake --build . --config ${{ matrix.build-config || 'Release' }}

    - name: Run test cases
      # Don't run tests on Windows ARM
      if: runner.os != 'Windows' || contains(matrix.name, 'ARM') == false
      run: |
        cd ${{ matrix.build-dir || '.' }}
        ctest --verbose -C Release --output-on-failure --max-width 120 -j ${{ matrix.parallels-jobs || '6' }}
      env:
        ASAN_OPTIONS: ${{ matrix.asan-options || 'verbosity=0' }}:abort_on_error=1
        MSAN_OPTIONS: ${{ matrix.msan-options || 'verbosity=0' }}:abort_on_error=1
        TSAN_OPTIONS: ${{ matrix.tsan-options || 'verbosity=0' }}:abort_on_error=1
        LSAN_OPTIONS: ${{ matrix.lsan-options || 'verbosity=0' }}:abort_on_error=1
        QEMU_RUN: ${{ matrix.qemu-run }}

    - name: Upload coverage report
      if: matrix.codecov && ( env.CODECOV_TOKEN_SECRET != '' || github.repository == 'zlib-ng/zlib-ng' )
      shell: bash
      run: |
        bash tools/codecov-upload.sh
      env:
        # Codecov does not yet support GitHub Actions
        CODECOV_TOKEN_SECRET: "${{secrets.CODECOV_TOKEN}}"
        CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN || 'e4fdf847-f541-4ab1-9d50-3d27e5913906' }}"
        CODECOV_FLAGS: "${{ matrix.codecov }}"
        CODECOV_NAME:  "${{ matrix.name }}"
        CODECOV_EXEC:  "${{ matrix.gcov-exec || 'gcov' }}"
        CODECOV_DIR:   "${{ matrix.build-dir || '.' }}"

    - name: Upload build errors
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ${{ matrix.name }} (cmake)
        path: |
          ${{ matrix.build-dir || '.' }}/CMakeFiles/CMakeOutput.log
          ${{ matrix.build-dir || '.' }}/CMakeFiles/CMakeError.log
          ${{ matrix.build-dir || '.' }}/Testing/Temporary/*
        retention-days: 30
