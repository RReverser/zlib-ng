name: CI CMake
on: [push, pull_request]
jobs:
  ci-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          Windows MSVC Win32,
          Windows MSVC Win64,
          Windows MSVC ARM No Test,
          Windows MSVC ARM64 No Test,
          Windows GCC,
          Windows GCC Compat No Opt,
          Windows Mingw32,
          Windows Mingw64
        ]
        include:

          - name: Windows MSVC Win32
            os: windows-latest
            compiler: cl
            cmake-args: -A Win32

          - name: Windows MSVC Win64
            os: windows-latest
            compiler: cl
            cmake-args: -A x64

          - name: Windows MSVC ARM No Test
            os: windows-latest
            compiler: cl
            cmake-args: -A ARM

          - name: Windows MSVC ARM64 No Test
            os: windows-latest
            compiler: cl
            cmake-args: -A ARM64

          - name: Windows GCC
            os: windows-latest
            compiler: gcc
            cmake-args: -G Ninja
            codecov: win_gcc

          - name: Windows GCC Compat No Opt
            os: windows-latest
            compiler: gcc
            cmake-args: -G Ninja -DZLIB_COMPAT=ON -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF
            codecov: win_gcc_compat_no_opt

          - name: Windows Mingw32
            os: windows-latest
            compiler: i686-w64-mingw32-gcc
            cmake-args: -G Ninja -DCMAKE_TOOLCHAIN_FILE=./cmake/toolchain-mingw-i686.cmake
            codecov: win_mingw32_gcc

          - name: Windows Mingw64
            os: windows-latest
            compiler: x86_64-w64-mingw32-gcc
            cmake-args: -G Ninja -DCMAKE_TOOLCHAIN_FILE=./cmake/toolchain-mingw-x86_64.cmake
            codecov: win_mingw64_gcc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Checkout test corpora
      uses: actions/checkout@v2
      with:
        repository: nmoinvaz/corpora
        path: test/data

    - name: Install packages (Ubuntu)
      if: runner.os == 'Linux' && matrix.packages
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.packages }}

    - name: Set environment variables (Windows)
      run:  echo "::set-env name=temp::$($env:TEMP)"

    - name: Cache packages (Windows)
      uses: actions/cache@v2
      if: runner.os == 'Windows'
      with:
        key: zlib-ng-win-choco-${{matrix.compiler}}
        path: |
          ${{env.temp}}\chocolatey\

    - name: Install packages (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ninja ${{ matrix.packages }} --no-progress

    - name: Install packages (Windows/GCC)
      if: runner.os == 'Windows' && matrix.codecov && matrix.compiler == 'gcc'
      # Use gcov-7 via mingw on windows because gcov-8 throws tons of warnings
      # https://partner-bugzilla.redhat.com/show_bug.cgi?id=1577508
      run: |
        choco install mingw --version=7.3.0 --force --allow-downgrade --no-progress

    - name: Install packages (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja ${{ matrix.packages }}

    - name: Install codecov.io tools
      if: matrix.codecov
      run: |
        python -u -m pip install git+https://github.com/codecov/codecov-python.git

    - name: Generate project files
      # Shared libaries turned off for qemu ppc* and sparc & reduce code coverage sources
      run: |
        mkdir ${{ matrix.build-dir || '.not-used' }}
        cd ${{ matrix.build-dir || '.' }}
        cmake ${{ matrix.build-src-dir || '.' }} ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }} -DBUILD_SHARED_LIBS=OFF -DWITH_FUZZERS=ON -DWITH_CODE_COVERAGE=ON -DWITH_MAINTAINER_WARNINGS=ON
      env:
        CC: ${{ matrix.compiler }}
        CFLAGS: ${{ matrix.cflags }}
        LDFLAGS: ${{ matrix.ldflags }}
        CI: true

    - name: Compile source code
      run: |
        cd ${{ matrix.build-dir || '.' }}
        cmake --build . --config ${{ matrix.build-config || 'Release' }}

    - name: Run test cases
      # Don't run tests on Windows ARM
      if: runner.os != 'Windows' || contains(matrix.name, 'ARM') == false
      run: |
        cd ${{ matrix.build-dir || '.' }}
        ctest -C Release --output-on-failure --max-width 120 -j 6
      env:
        ASAN_OPTIONS: ${{ matrix.asan-options || 'verbosity=1' }}
        MSAN_OPTIONS: ${{ matrix.msan-options || 'verbosity=1' }}
        TSAN_OPTIONS: ${{ matrix.tsan-options || 'verbosity=1' }}
        LSAN_OPTIONS: ${{ matrix.lsan-options || 'verbosity=1' }}

    - name: Upload coverage report
      if: matrix.codecov && ( env.CODECOV_TOKEN_SECRET != '' || github.repository == 'zlib-ng/zlib-ng' )
      shell: bash
      run: |
        bash tools/codecov-upload.sh
      env:
        # Codecov does not yet support GitHub Actions
        CODECOV_TOKEN_SECRET: "${{secrets.CODECOV_TOKEN}}"
        CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN || 'e4fdf847-f541-4ab1-9d50-3d27e5913906' }}"
        CODECOV_FLAGS: "${{ matrix.codecov }}"
        CODECOV_NAME:  "${{ matrix.name }}"
        CODECOV_EXEC:  "${{ matrix.gcov-exec || 'gcov' }}"
        CODECOV_DIR:   "${{ matrix.build-dir || '.' }}"
