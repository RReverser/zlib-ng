name: CI CMake
on: [push, pull_request]
jobs:
  ci-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: macOS GCC 1
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 2
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 3
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 4
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 5
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 6
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 7
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 8
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10
          - name: macOS GCC 9
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 10
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 11
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 12
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 13
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 14
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 15
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 16
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 17
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 18
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 19
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

          - name: macOS GCC 20
            os: macos-latest
            compiler: gcc-10
            packages: gcc@10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Checkout test corpora
      uses: actions/checkout@v2
      # Don't test against all corpora with MinGW due to Wine being unable to run parallel jobs
      # without connection timeout. Without parallel jobs test runs using Wine take close to an hour.
      if: contains(matrix.name, 'MinGW') == false
      with:
        repository: zlib-ng/corpora
        path: test/data/corpora

    #- name: Install packages (macOS)
    #  if: runner.os == 'macOS'
    #  run: |
    #    brew install ninja ${{ matrix.packages }}
    #  env:
    #    HOMEBREW_NO_INSTALL_CLEANUP: 1

    - name: GZip Version
      if: runner.os != 'Windows'
      run: |
        gzip --version

    - name: System Info
      if: runner.os == 'macOS'
      run: |
        curl ipecho.net/plain
        sysctl -n machdep.cpu.brand_string
        sysctl -n hw.memsize
        networksetup -getcomputername

    - name: Generate project files
      # Shared libaries turned off for qemu ppc* and sparc & reduce code coverage sources
      run: |
        mkdir ${{ matrix.build-dir || '.not-used' }}
        cd ${{ matrix.build-dir || '.' }}
        cmake ${{ matrix.build-src-dir || '.' }} ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }} -DWITH_OPTIM=OFF -DBUILD_SHARED_LIBS=OFF -DWITH_FUZZERS=OFF -DWITH_MAINTAINER_WARNINGS=ON -DUNALIGNED_OK=OFF
      env:
        CC: ${{ matrix.compiler }}
        CFLAGS: ${{ matrix.cflags }}
        LDFLAGS: ${{ matrix.ldflags }}
        CI: true

    - name: Compile source code
      run: |
        cd ${{ matrix.build-dir || '.' }}
        cmake --build . --config ${{ matrix.build-config || 'Release' }}

    - name: Run test cases
      # Don't run tests on Windows ARM
      if: runner.os != 'Windows' || contains(matrix.name, 'ARM') == false
      run: |
        cd ${{ matrix.build-dir || '.' }}
        ctest --verbose -C Release --output-on-failure --max-width 120 -j ${{ matrix.parallels-jobs || '6' }}
      env:
        ASAN_OPTIONS: ${{ matrix.asan-options || 'verbosity=0' }}:abort_on_error=1
        MSAN_OPTIONS: ${{ matrix.msan-options || 'verbosity=0' }}:abort_on_error=1
        TSAN_OPTIONS: ${{ matrix.tsan-options || 'verbosity=0' }}:abort_on_error=1
        LSAN_OPTIONS: ${{ matrix.lsan-options || 'verbosity=0' }}:abort_on_error=1
        QEMU_RUN: ${{ matrix.qemu-run }}
        CI: true

    - name: Upload build errors
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ${{ matrix.name }} (cmake)
        path: |
          ${{ matrix.build-dir || '.' }}/CMakeFiles/CMakeOutput.log
          ${{ matrix.build-dir || '.' }}/CMakeFiles/CMakeError.log
          ${{ matrix.build-dir || '.' }}/test/**/*.diff
          ${{ matrix.build-dir || '.' }}/test/**/*.hex
          ${{ matrix.build-dir || '.' }}/test/**/*.gz
          ${{ matrix.build-dir || '.' }}/test/**/*.out
          ${{ matrix.build-dir || '.' }}/test/**/*.xout
          ${{ matrix.build-dir || '.' }}/test/**/*.out.gz
          ${{ matrix.build-dir || '.' }}/**/*.xout
        retention-days: 30
