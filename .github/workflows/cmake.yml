name: CMake
on: [push, pull_request]
env:
  TERM: xterm-256color
  GTEST_COLOR: 1
jobs:
  cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows MSVC 2013 v120 Win32
            os: windows-2019
            compiler: cl
            cmake-args: -G "Visual Studio 12 2013" -A Win32 -T v120
            packages: microsoft-build-tools-2013

          - name: Windows MSVC 2013 v120 Win64
            os: windows-2019
            compiler: cl
            cmake-args: -G "Visual Studio 12 2013" -A x64 -T v120
            packages: microsoft-build-tools-2013

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Checkout test corpora
      uses: actions/checkout@v3
      # Don't test against all corpora with MinGW due to Wine being unable to run parallel jobs
      # without connection timeout. Without parallel jobs test runs using Wine take close to an hour.
      if: contains(matrix.name, 'MinGW') == false
      with:
        repository: zlib-ng/corpora
        path: test/data/corpora

    - name: Add repositories (Wine)
      if: contains(matrix.packages, 'wine')
      run: sudo dpkg --add-architecture i386

    - name: Install packages (Ubuntu)
      if: runner.os == 'Linux' && matrix.packages
      run: |
        sudo apt-get update
        sudo apt-get install -y --allow-downgrades ${{ matrix.packages }}

    - name: Install packages (Windows)
      if: runner.os == 'Windows'
      run: |
        # strawberryperl installs /c/Strawberry/c/bin/libstdc++-6.dll, which is incompatible with the mingw64 one.
        # zlib-ng does not need perl, so simply remove it.
        choco uninstall --no-progress strawberryperl
        choco install --no-progress ninja ${{ matrix.packages }}

    - name: Install packages (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja ${{ matrix.packages }}
      env:
        HOMEBREW_NO_INSTALL_CLEANUP: 1

    - name: Initialize Wine
      # Prevent parallel test jobs from initializing Wine at the same time
      if: contains(matrix.packages, 'wine')
      run: wineboot --init

    - name: Compile LLVM C++ libraries (MSAN)
      if: contains(matrix.name, 'MSAN')
      run: |
        git clone --depth=1 https://github.com/llvm/llvm-project --single-branch --branch llvmorg-11.0.0
        cmake -S llvm-project/llvm -B llvm-project/build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" \
          -DLLVM_USE_SANITIZER=MemoryWithOrigins \
          -DLLVM_LIBC_ENABLE_LINTING=OFF
        cmake --build llvm-project/build -- cxx cxxabi
        echo "LLVM_BUILD_DIR=`pwd`/llvm-project/build" >> $GITHUB_ENV
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.cxx-compiler }}

    - name: Generate project files
      shell: bash
      # Shared libraries turned off for qemu ppc* and sparc & reduce code coverage sources
      run: |
        cmake -S ${{ matrix.build-src-dir || '.' }} -B ${{ matrix.build-dir || '.' }} ${{ matrix.cmake-args }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }} \
          -DBUILD_SHARED_LIBS=OFF \
          -DWITH_FUZZERS=ON \
          -DWITH_MAINTAINER_WARNINGS=ON \
          ${{ matrix.codecov && '-DWITH_CODE_COVERAGE=ON' }}
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.cxx-compiler }}
        CFLAGS: ${{ matrix.cflags }}
        LDFLAGS: ${{ matrix.ldflags }}
        CI: true

    - name: Compile source code
      run: cmake --build ${{ matrix.build-dir || '.' }} --config ${{ matrix.build-config || 'Release' }}

    - name: Run test cases
      # Don't run tests on Windows ARM
      if: runner.os != 'Windows' || contains(matrix.name, 'ARM') == false
      run: ctest --verbose -C Release --output-on-failure --max-width 120 -j ${{ matrix.parallels-jobs || '6' }}
      working-directory: ${{ matrix.build-dir || '.' }}
      env:
        ASAN_OPTIONS: ${{ matrix.asan-options || 'verbosity=0' }}:abort_on_error=1:halt_on_error=1
        MSAN_OPTIONS: ${{ matrix.msan-options || 'verbosity=0' }}:abort_on_error=1:halt_on_error=1
        TSAN_OPTIONS: ${{ matrix.tsan-options || 'verbosity=0' }}:abort_on_error=1:halt_on_error=1
        LSAN_OPTIONS: ${{ matrix.lsan-options || 'verbosity=0' }}:abort_on_error=1:halt_on_error=1
        UBSAN_OPTIONS: ${{ matrix.ubsan-options || 'verbosity=0' }}:print_stacktrace=1:abort_on_error=1:halt_on_error=1

    - name: Generate coverage report
      if: matrix.codecov
      shell: bash
      run: |
        python3 -u -m pip install --user gcovr==5.0
        python3 -m gcovr -j 3 --verbose \
          --exclude-unreachable-branches \
          --gcov-executable "${{ matrix.gcov-exec || 'gcov' }}" \
          --root ${{ matrix.build-src-dir || '.' }} \
          --xml --output coverage.xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v2
      if: matrix.codecov && (env.CODECOV_TOKEN != '' || github.repository == 'zlib-ng/zlib-ng')
      with:
        token: ${{ secrets.CODECOV_TOKEN || 'e4fdf847-f541-4ab1-9d50-3d27e5913906' }}
        flags: ${{ matrix.codecov }}
        name: ${{ matrix.name }}
        directory: ${{ matrix.build-src-dir || '.' }}
        verbose: true
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: "${{secrets.CODECOV_TOKEN}}"

    - name: Upload build errors
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ${{ matrix.name }} (cmake)
        path: |
          **/CMakeFiles/CMakeOutput.log
          **/CMakeFiles/CMakeError.log
          **/Testing/Temporary/*
          coverage.xml
        retention-days: 30
